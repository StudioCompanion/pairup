### This file was generated by Nexus Schema
### Do not make changes to this file directly

"""
The type of abuse
"""
enum Abuse {
  HARASSMENT_OR_BULLYING
  PRETENDING_TO_BE_SOMEONE
  SOMETHING_ELSE
  SPAM_OR_HARMFUL
}

"""
Defines a start & end time for a section of a Parier's availability during a day
"""
input AvailabilityTimeInput {
  endTime: String
  startTime: String
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
Possible error codes that can be returned
"""
enum ErrorCodes {
  """
  An invalid value has been passed
  """
  INVALID

  """
  The entry was not found
  """
  NOT_FOUND
}

"""
An error that has happened when interacting with the API
"""
type InputErrors {
  errorCode: ErrorCodes
  input: String
  message: String
}

type Mutation {
  """
  Create an abuse report
  """
  reportsSubmitAbuse(report: ReportAbuseInput!): ReportSubmitAbusePayload

  """
  create a session with a pairer
  """
  sessionCreate(
    paireeDetails: SessionCreatePaireeInput!
    pairerId: ID!
  ): SessionCreatePayload

  """
  Create an access token for the current user
  """
  userCreateAccessToken(
    email: String!
    password: String!
  ): UserCreateTokenPayload

  """
  Create an account for a new user
  """
  userCreateAccount(
    email: String!
    password: String!
    profile: UserProfileInput!
  ): UserCreateAccountPayload

  """
  Starts the recovery process for a user who has forgotten their password
  """
  userRecover(email: String!): UserRecoverPayload

  """
  Refreshes tokens including expired ones assuming the personalKey has not changed
  """
  userRefreshAccessToken(accessToken: String!): UserRefreshAccessTokenPayload

  """
  Reset a users password by providing a resetToken
  """
  userReset(password: String!, resetToken: String!): UserResetPayload

  """
  Update an account for an existing user
  """
  userUpdateAccount(
    email: String
    password: String
    profile: UserProfileInput
  ): UserUpdateAccountPayload
}

type Query {
  """
  Check if the email address submitted by a user or persepctive user has already been used before
  """
  userIsEmailUnique(email: String!): Boolean
}

input ReportAbuseInput {
  abuseType: Abuse!
  description: String!
  email: String!
  isAbuserPairer: Boolean!
  name: String!
}

"""
Encapsulates return values of report mutations where input values could be incorrect
"""
type ReportSubmitAbusePayload {
  ReportInputError: [InputErrors]
  success: Boolean
}

"""
Possible roles a user can have within the database
"""
enum Role {
  PAIREE
  PAIRER
}

"""
A session created between a pairer and a pairee
"""
type Session {
  """
  Timestamp of when the appointment starts and finishes
  """
  appointment: String!

  """
  First name of the pairee
  """
  firstName: String!

  """
  Id for the session
  """
  id: ID!

  """
  Job title of the pairee
  """
  jobTitle: String!

  """
  Last name of the pairee
  """
  lastName: String!

  """
  Portfolio of the pairee
  """
  portfolio: String!

  """
  Subjects the pairee want to talk to the pairer about
  """
  subjects: [String!]!
}

"""
Pairee details and information for creating a session
"""
input SessionCreatePaireeInput {
  appointment: String!
  email: String!
  firstName: String!
  jobTitle: String
  lastName: String
  message: String!
  portfolio: String
  subjects: [UserDisciplines]
  timezone: String!
}

"""
Payload from the sessionCreate mutation
"""
type SessionCreatePayload {
  Session: Session
  SessionInputError: [InputErrors]
}

"""
An individual user of PairUp
"""
type User {
  """
  User's email
  """
  email: String!

  """
  The User's role
  """
  role: Role!

  """
  Unique identifier of the user in the database
  """
  userId: String!
}

"""
Access token required to make modifications to the User & Messaging
"""
type UserAccessToken {
  """
  The actual token used to authenticate mutations & queries
  """
  accessToken: String!

  """
  ISO 8601 date of when the token expires
  """
  expiresAt: Date!
}

"""
A Pairer's availability related to their profile
"""
input UserAvailabilityInput {
  friday: [AvailabilityTimeInput]
  monday: [AvailabilityTimeInput]
  saturday: [AvailabilityTimeInput]
  sunday: [AvailabilityTimeInput]
  thursday: [AvailabilityTimeInput]
  tuesday: [AvailabilityTimeInput]
  wednesday: [AvailabilityTimeInput]
}

"""
Encapsulates return values of user mutations where input fields could be incorrect
"""
type UserCreateAccountPayload {
  User: User
  UserInputError: [InputErrors]
}

"""
Payload from the userCreateToken mutation
"""
type UserCreateTokenPayload {
  UserAccessToken: UserAccessToken
  UserInputError: [InputErrors]
}

"""
Possible Pairer disciplines
"""
enum UserDisciplines {
  ARCHITECTURE
  BRANDING
  BUSINESS
  COPYWRITING
  CREATIVITY
  DESIGN
  DEVELOPMENT
  ECOMMERCE
  ENTREPRENEURSHIP
  EXPERIMENTAL
  FASHION
  GAMES
  ILLUSTRATION
  INNOVATION
  LEADERSHIP
  MOTION
  MUSIC
  PHOTOGRAPHY
  PORTFOLIOS
  PRODUCT
  PUBLISHING
  REMOTE
  STRATEGY
  SUSTAINABILITY
  THREED
  UX
  VR
  WRITING
}

"""
A Pairer's profile that is submitted to the CMS
"""
input UserProfileInput {
  """
  Pairer's availability
  """
  availability: UserAvailabilityInput

  """
  Pairer's biography
  """
  bio: String

  """
  Pairer's company url
  """
  companyUrl: String

  """
  Pairer's disciplines
  """
  disciplines: [UserDisciplines]

  """
  Pairer's first name
  """
  firstName: String

  """
  Pairer's github url
  """
  github: String

  """
  Pairer's instagram url
  """
  instagram: String

  """
  Pairer's job title
  """
  jobTitle: String

  """
  Pairer's last name
  """
  lastName: String

  """
  Pairer's linkedin url
  """
  linkedin: String

  """
  Pairer's portfoli url
  """
  portfolioUrl: String

  """
  Pairer's timezeon
  """
  timezone: String

  """
  Pairer's twitter url
  """
  twitter: String
}

"""
Payload from the userRecover mutation
"""
type UserRecoverPayload {
  UserInputError: [InputErrors]
  success: Boolean
}

"""
Payload from the userRefreshAccessToken mutation
"""
type UserRefreshAccessTokenPayload {
  UserAccessToken: UserAccessToken
  UserInputError: [InputErrors]
}

"""
Payload from the userReset mutation
"""
type UserResetPayload {
  User: User
  UserAccessToken: UserAccessToken
  UserInputError: [InputErrors]
}

"""
Payload from the userUpdateAccount mutation
"""
type UserUpdateAccountPayload {
  UserAccessToken: UserAccessToken
  UserInputError: [InputErrors]
}
